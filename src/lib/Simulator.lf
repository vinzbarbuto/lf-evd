target Python {
  files: ["../../images/", "./utils/"]
}

/*
 * The simulator uses an STA of 10 msec and an STAA of 0 in the external input reaction (i.e, signal input).
 * This configuration ensures that the simulator can handle both external signals and internal timers.
 * Since the input tag and the timer tags are not logically simultaneous, the Simulator's tag advances
 * while the input tag lags behind, potentially causing an STAA violation. By setting the STA to 10 msec,
 * we allow the input logical time to catch up with the Simulator's logical time, thus avoiding STAA violations.
 */
reactor TrafficLightsSimulator(STA = 10msec) {
  preamble {=
    from utils.traffic_signal import TrafficSignalController
    from utils.ui import TrafficSignalUI
  =}

  state controller
  state ui
  timer traffic_lights_tick(10msec, 1 sec)
  timer step(10msec, 100msec)

  input signal

  reaction(startup) {=
    self.controller = self.TrafficSignalController(num_signals=4)
    self.ui = self.TrafficSignalUI(self.controller)
  =}

  reaction(signal) {=
    lane = signal.value
    print(f"[SIMULATOR] Command received. Sending preemption message for signal {lane+1}")
    print(f"[SIMULATOR] -- Logical Elapsed: {lf.time.logical_elapsed()}. Microstep is {lf.tag().microstep}")
    print(f"[SIMULATOR] -- Physical Elapsed: {lf.time.physical_elapsed()}")
    print(f"[SIMULATOR] -- Lag: {lf.time.physical_elapsed() - lf.time.logical_elapsed()}")
    self.controller.preemption(lane)
  =} STAA(0) {=
    print(f"*** STAA *** [SIMULATOR] Command received too late")
    print(f"*** STAA *** [SIMULATOR] -- Logical Elapsed: {lf.time.logical_elapsed()}. Microstep is {lf.tag().microstep}")
    print(f"*** STAA *** [SIMULATOR] -- Physical Elapsed: {lf.time.physical_elapsed()}")
    print(f"*** STAA *** [SIMULATOR] -- Lag: {lf.time.physical_elapsed() - lf.time.logical_elapsed()}")
    print(f"*** STAA *** [SIMULATOR] -- Intended tag was ({signal.intended_tag.time - lf.time.start()}, {signal.intended_tag.microstep}).")
  =} deadline (30msec){=
    print(f"*** DEADLINE VIOLATION *** [SIMULATOR] Command received too late")
    print(f"*** DEADLINE VIOLATION *** [SIMULATOR] -- Logical Elapsed: {lf.time.logical_elapsed()}. Microstep is {lf.tag().microstep}")
    print(f"*** DEADLINE VIOLATION *** [SIMULATOR] -- Physical Elapsed: {lf.time.physical_elapsed()}")
    print(f"*** DEADLINE VIOLATION *** [SIMULATOR] -- Lag: {lf.time.physical_elapsed() - lf.time.logical_elapsed()}")
    print(f"*** DEADLINE VIOLATION *** [SIMULATOR] -- Intended tag was ({signal.intended_tag.time - lf.time.start()}, {signal.intended_tag.microstep}).")
  =}

  reaction(traffic_lights_tick) {=
    self.controller.manage_signals()
  =}

  reaction(step) {=
    try:
      if self.ui and self.ui.running:
          self.ui.step()
    except SystemExit as se:
      request_stop()
  =}

  reaction(shutdown) {=
    print("[SIMULATOR] Shutting down")
  =}
}