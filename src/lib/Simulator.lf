target Python {
  files: ["../../images/", "./utils/"]
}

reactor TrafficLightsSimulator {
  preamble {=
    from utils.traffic_signal import TrafficSignalController
    from utils.ui import TrafficSignalUI
    import threading
    import random
  =}

  state controller
  state ui
  logical action traffic_lights_tick
  logical action display_step

  input signal

  reaction(startup) -> display_step, traffic_lights_tick {=
    self.controller = self.TrafficSignalController(num_signals=4)
    self.ui = self.TrafficSignalUI(self.controller)
    traffic_lights_tick.schedule(0)
    display_step.schedule(MSEC(100))
  =}

  reaction(traffic_lights_tick) {=
    self.controller.manage_signals()
    traffic_lights_tick.schedule(SEC(1))
  =}

  reaction(signal) {=
    lane = signal.value
    print(f"[SIMULATOR] Command received. Sending preemption message for signal {lane+1}")
    print(f"[SIMULATOR] -- Logical Elapsed: {lf.time.logical_elapsed()}. Microstep is {lf.tag().microstep}")
    print(f"[SIMULATOR] -- Physical Elapsed: {lf.time.physical_elapsed()}")
    print(f"[SIMULATOR] -- Lag: {lf.time.physical_elapsed() - lf.time.logical_elapsed()}")
    self.ui.message_queue.put(lane)
  =} deadline(30 msec) {=
    print(f"[SIMULATOR] DEADLINE MISSED")
    print(f"[SIMULATOR] -- Logical Elapsed: {lf.time.logical_elapsed()}. Microstep is {lf.tag().microstep}")
    print(f"[SIMULATOR] -- Physical Elapsed: {lf.time.physical_elapsed()}")
    print(f"[SIMULATOR] -- Lag: {lf.time.physical_elapsed() - lf.time.logical_elapsed()}")
  =}

  reaction(display_step) -> display_step {=
    if self.ui and self.ui.running:
        self.ui.step()
        display_step.schedule(MSEC(100))
    else:
        request_stop()
  =}

  reaction(shutdown) {=
    print("Shutting down")
  =}
}